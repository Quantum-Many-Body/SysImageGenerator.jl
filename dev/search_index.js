var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = SysImageGenerator","category":"page"},{"location":"#SysImageGenerator","page":"Home","title":"SysImageGenerator","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Generation of Julia sysimages of quantum-many-body packages.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Sysimages can be used to reduce the latency of Julia just-in-time (JIT) compilation during the first run of codes. Based on PackageCompiler, this package could generate the appropriate sysimage of the packages maintained by the Quantum Many Body Group, such as QuantumLattices, ExactDiagonalization, TightBindingApproximation, SpinWaveTheory, etc., to significantly reduce their JIT compilation time. Moreover, the generated sysimage could also be installed as a new jupyter notebook kernel if you prefer IJulia.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"In Julia v1.6+, please type ] in the REPL to use the package mode, then type this command:","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add https://github.com/Quantum-Many-Body/SysImageGenerator.jl","category":"page"},{"location":"#Generation-of-sysimage","page":"Home","title":"Generation of sysimage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The sysimage of quantum-many-body packages can be generated by the sysimage function exported by this package. The simplest way to achieve such a goal is to run the following codes either in a script or in the REPL:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using SysImageGenerator\nsysimage()","category":"page"},{"location":"","page":"Home","title":"Home","text":"The general usage of sysimage is as follows:","category":"page"},{"location":"","page":"Home","title":"Home","text":"sysimage(name_of_the_generated_sysimage;\n    packages=[\"subset of the supported quantum-many-body packages\"],\n    path=\"path to store the generated sysimage\",\n    plot=true, # if you want Plots to be included in your sysimage, otherwise false\n    symbolic=true # if you want SymPy to be included in your sysimage, otherwise false\n    )","category":"page"},{"location":"","page":"Home","title":"Home","text":"Here,","category":"page"},{"location":"","page":"Home","title":"Home","text":"the default sysimage name is default_sysimage,\nthe supported quantum-many-body packages are supported_packages, also by default, all packages will be included,\nand the default path to store the generated sysimage is \"path-to-SysImageGenerator-Package/sysimages/\".","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Note\nThe generation of the sysimage may take a couple of minutes. Just wait for its completion.","category":"page"},{"location":"#Install-new-Jupyter-notebook-kernel-with-the-generated-sysimage","page":"Home","title":"Install new Jupyter notebook kernel with the generated sysimage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"After the generation of the sysimage of quantum-many-body packages, you can install a specific Jupyter notebook kernel that uses it by the installkernel function exported by this package:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using SysImageGenerator\ninstallkernel(name_of_the_installed_kernel; # default value is \"Julia-QuantumManyBody\"\n    sysimage=\"name of the generated sysimage\",\n    path=\"path of the generated sysimage\"\n)","category":"page"},{"location":"","page":"Home","title":"Home","text":"The sysimage and path keyword arguments should be the same with those accepted by the sysimage function that generates the sysimage. The default arguments of these two functions are compatible. So if you generate a sysimage by","category":"page"},{"location":"","page":"Home","title":"Home","text":"sysimage()","category":"page"},{"location":"","page":"Home","title":"Home","text":"then you can simply install it by","category":"page"},{"location":"","page":"Home","title":"Home","text":"installkernel()","category":"page"},{"location":"","page":"Home","title":"Home","text":"accordingly.","category":"page"},{"location":"#Manual","page":"Home","title":"Manual","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [SysImageGenerator]","category":"page"},{"location":"#SysImageGenerator.default_sysimage","page":"Home","title":"SysImageGenerator.default_sysimage","text":"const default_sysimage = \"sys_QuantumManyBody.so\"\n\nThe default sysimage name of the quantum-many-body packages.\n\n\n\n\n\n","category":"constant"},{"location":"#SysImageGenerator.supported_packages","page":"Home","title":"SysImageGenerator.supported_packages","text":"const supported_packages = [\n    \"QuantumLattices\",\n    \"ExactDiagonalization\",\n    \"TightBindingApproximation\",\n    \"SpinWaveTheory\",\n    \"MagnonPhononHybridization\"\n]\n\nThe supported quantum-many-body packages that could be specified to generate the Julia sysimages.\n\n\n\n\n\n","category":"constant"},{"location":"#IJulia.installkernel","page":"Home","title":"IJulia.installkernel","text":"installkernel(\n    kernel::String=\"Julia-QuantumManyBody\";\n    sysimage::String=default_sysimage,\n    path::String=string(dirname(dirname(pathof_noload(\"SysImageGenerator\"))), \"/sysimages\")\n    )\n\nInstall a Jupyter notebook kernel with the specified sysimage.\n\n\n\n\n\n","category":"function"},{"location":"#SysImageGenerator.extract-Tuple{String}","page":"Home","title":"SysImageGenerator.extract","text":"extract(package_name::String)\n\nExtract the test sets of a package and run them.\n\n\n\n\n\n","category":"method"},{"location":"#SysImageGenerator.sysimage","page":"Home","title":"SysImageGenerator.sysimage","text":"sysimage(\n    name::String=default_sysimage;\n    packages::Vector{String}=copy(supported_packages),\n    path::String=string(dirname(dirname(pathof_noload(\"SysImageGenerator\"))), \"/sysimages\"),\n    plot::Bool=true,\n    symbolic::Bool=true\n    )\n\nCreate a sysimage with a given name for the specified packages and store it in the specified path.\n\nWhen plot is true, Plots will be included in the sysimage. So will SymPy when symbolic is true.\n\n\n\n\n\n","category":"function"}]
}
